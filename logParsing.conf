input {
  file {
			path => "D:/test/test.log"
			sincedb_path => "D:/test/elasticsearch-2.3.5/data/elasticsearch/sincedb_path"
			start_position => "beginning"
			discover_interval => "3"
            codec =>
                    multiline 
					{
					  max_lines => 2000
					  pattern => "^%{TOMCAT_DATESTAMP} "
					  negate => true
					  what => previous
					}    
	}
}

filter {
	grok {
		match => {"message" => "%{TOMCATLOG}"}
		remove_field => ["path","message" ]
#		remove_field => ["path" ]
	}
	
	date {
		match => ["timestamp","yyyy-MM-dd HH:mm:ss,SSS"]
	}
	
	if "multiline" in [tags] {
		grok {	
			match=>["logmessage","%{JAVASTACKTRACEPART:stacktrace}"]
		}
	}
	if "multiline" in [tags] and "_grokparsefailure" in [tags]
	{
			mutate  {	
				remove_tag => ["_grokparsefailure"]
				add_field => { "type" => "acceptedParseFailure" }
			}
	}
	
	if [stacktrace]
	{
		mutate {
			add_field => { "exceptionCause" => "%{stacktrace}" }
		}
		ruby {
		   code => "event['exceptionCause'] = event['exceptionCause'].split(/\r\n/)"
		}	
		# keep first line only
		mutate {
			replace => { "exceptionCause" => "%{[exceptionCause][0]}" }
		}	
	}
}

output {		
        elasticsearch {		
                        codec => json {}
                        manage_template => false
                        index => "orion"
                }
		if [type] == "acceptedParseFailure"	 
		{
		        elasticsearch {		
                        codec => json {}
                        manage_template => false
                        index => "acceptedparsefailure"
                }
			
		}
		if "_grokparsefailure" in [tags] {
				elasticsearch {		
					codec => json {}
					manage_template => false
					index => "parsefailure"
			}
		}
		stdout { codec => rubydebug  }
		#stdout { codec => dots  }
}